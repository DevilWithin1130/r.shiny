name: RenoPilot Container Instance CI/CD

on: 
  push:
    branches: [main]
    paths-ignore:
    - '.github/workflows/webapp-ci-cd.yaml'
  pull_request:
    branches: [main]
    paths-ignore:
    - '.github/workflows/webapp-ci-cd.yaml'
  workflow_dispatch:

jobs:
  test-app:
    runs-on: ubuntu-latest
    name: Test R Shiny App
    
    env:
      GITHUB_PAT: ${{ secrets.RENOPILOT_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - name: Checkout Code Base
        uses: actions/checkout@v3

      - name: Set up R Environment
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: release
          use-public-rspm: true

      - name: Install Dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: shinytest2

      - name: Define Environment Variables
        run: |
          echo Environment="Github" >> ~/.Renviron
          echo Driver="ODBC Driver 18 for SQL Server" >> ~/.Renviron
          echo Server="shiny.database.windows.net" >> ~/.Renviron
          echo Database="Shiny" >> ~/.Renviron
          echo UID="shiny" >> ~/.Renviron
          echo PWD="${{ secrets.DB_PASSWORD }}" >> ~/.Renviron
        shell: bash

      - name: Run Tests
        uses: rstudio/shinytest2/actions/test-app@v1
        with:
          path: "."

  deploy-infrastructure:
    needs: test-app
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@main

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Register Required Resource Providers
      uses: azure/cli@v1
      with:
        inlineScript: |
          echo "Registering Azure resource providers required for RenoPilot Container infrastructure..."
          # These Microsoft namespaces are required Azure services for RenoPilot application
          # They cannot be renamed but are essential for our infrastructure
          az provider register --namespace Microsoft.ContainerInstance
          az provider register --namespace Microsoft.ContainerRegistry
          az provider register --namespace Microsoft.Network
          
          echo "Waiting for RenoPilot required Azure service registrations to complete..."
          # Checking registration status for required providers
          az provider show -n Microsoft.ContainerInstance --query registrationState
          az provider show -n Microsoft.ContainerRegistry --query registrationState
          az provider show -n Microsoft.Network --query registrationState
          
          # Verify registrations
          for provider in Microsoft.ContainerInstance Microsoft.ContainerRegistry Microsoft.Network; do
            state=$(az provider show -n $provider --query registrationState -o tsv)
            echo "RenoPilot Azure dependency: $provider registration state: $state"
            if [ "$state" != "Registered" ]; then
              echo "Waiting for $provider to complete registration..."
              for i in {1..12}; do
                sleep 10
                state=$(az provider show -n $provider --query registrationState -o tsv)
                echo "$provider registration state: $state"
                if [ "$state" == "Registered" ]; then
                  break
                fi
                if [ $i -eq 12 ] && [ "$state" != "Registered" ]; then
                  echo "Warning: $provider registration taking longer than expected. Continuing anyway."
                fi
              done
            fi
          done

    - name: Check and Clean Existing Infrastructure
      uses: azure/cli@v1
      with:
        inlineScript: |
          # Check if resource group exists
          RG_EXISTS=$(az group exists --name RenoPilotContainerRG)
          
          if [ "$RG_EXISTS" = "true" ]; then
            echo "Existing infrastructure found. Cleaning up in proper order..."
            
            # 1. Delete Container Instances first (they depend on other resources)
            echo "Deleting Container Instances..."
            az container delete --name renopilotfenceappinstance --resource-group RenoPilotContainerRG --yes || true
            
            # 2. Delete ACR
            echo "Deleting Azure Container Registry..."
            az acr delete --name renopilotcontreg --resource-group RenoPilotContainerRG --yes || true
            
            # 3. Delete Firewalls
            echo "Deleting Firewalls..."
            az network firewall delete --name container-publicfw --resource-group RenoPilotContainerRG || true
            az network firewall delete --name container-privatefw --resource-group RenoPilotContainerRG || true
            
            # 4. Delete VNet and subnets
            echo "Deleting VNet and subnets..."
            az network vnet delete --name renopilot-container-vpc --resource-group RenoPilotContainerRG || true
            
            echo "Infrastructure cleanup complete."
          else
            echo "No existing infrastructure found. Proceeding with fresh deployment."
          fi

    - name: Create VPC and Subnets
      uses: azure/cli@v1
      with:
        inlineScript: |
          # Create Resource Group
          echo "Creating Resource Group..."
          az group create --name RenoPilotContainerRG --location australiaeast
          
          # Verify resource group was created
          echo "Verifying Resource Group creation..."
          if ! az group show --name RenoPilotContainerRG &>/dev/null; then
            echo "Error: Resource group RenoPilotContainerRG was not created successfully."
            exit 1
          fi
          
          # Add a short delay to ensure resource group is fully provisioned
          echo "Waiting for resource group to be fully provisioned..."
          sleep 10
          
          # VNet with /16 CIDR block allowing up to 65,536 IP addresses
          echo "Creating VNet..."
          az network vnet create \
            --name renopilot-container-vpc \
            --resource-group RenoPilotContainerRG \
            --location australiaeast \
            --address-prefix 10.0.0.0/16
          
          # Verify VNet was created
          echo "Verifying VNet creation..."
          if ! az network vnet show --name renopilot-container-vpc --resource-group RenoPilotContainerRG &>/dev/null; then
            echo "Error: VNet renopilot-container-vpc was not created successfully."
            exit 1
          fi
          
          # Public subnet with /24 CIDR block allowing up to 256 IP addresses
          echo "Creating Public Subnet..."
          az network vnet subnet create \
            --name ContainerPublicSubnet \
            --vnet-name renopilot-container-vpc \
            --resource-group RenoPilotContainerRG \
            --address-prefix 10.0.1.0/24
          
          # Private subnet for sensitive resources with /24 CIDR block
          echo "Creating Private Subnet..."
          az network vnet subnet create \
            --name ContainerPrivateSubnet \
            --vnet-name renopilot-container-vpc \
            --resource-group RenoPilotContainerRG \
            --address-prefix 10.0.2.0/24
          
          # Add NSG for container public subnet
          echo "Creating NSG for container public subnet..."
          az network nsg create \
            --name container-public-nsg \
            --resource-group RenoPilotContainerRG \
            --location australiaeast
            
          # Add rule to allow port 3838
          az network nsg rule create \
            --name AllowShiny \
            --nsg-name container-public-nsg \
            --resource-group RenoPilotContainerRG \
            --protocol tcp \
            --direction inbound \
            --source-address-prefix '*' \
            --source-port-range '*' \
            --destination-address-prefix '*' \
            --destination-port-range 3838 \
            --access allow \
            --priority 100
            
          # Apply NSG to the subnet
          az network vnet subnet update \
            --name ContainerPublicSubnet \
            --vnet-name renopilot-container-vpc \
            --resource-group RenoPilotContainerRG \
            --network-security-group container-public-nsg

    - name: Deploy Firewalls
      uses: azure/cli@v1
      with:
        inlineScript: |
          echo "Creating Firewalls..."
          # Create Public Firewall
          az network firewall create \
            --name container-publicfw \
            --resource-group RenoPilotContainerRG \
            --location australiaeast

          # Create Private Firewall
          az network firewall create \
            --name container-privatefw \
            --resource-group RenoPilotContainerRG \
            --location australiaeast

    - name: Deploy Container Registry
      uses: azure/cli@v1
      with:
        inlineScript: |
          ACR_NAME="renopilotcontreg"
          # Using Standard SKU instead of Premium to avoid quota issues:
          # - Still provides good performance
          # - Sufficient for development and testing
          # - More widely available in regions
          az acr create \
            --resource-group RenoPilotContainerRG \
            --name $ACR_NAME \
            --sku Standard \
            --location australiaeast \
            --admin-enabled true  # Enables admin authentication for testing, consider disabling in production
          
          # Retrieve and store registry credentials securely in GitHub environment
          ACR_LOGIN_SERVER=$(az acr show -n $ACR_NAME --query loginServer -o tsv)
          ACR_USERNAME=$(az acr credential show -n $ACR_NAME --query username -o tsv)
          ACR_PASSWORD=$(az acr credential show -n $ACR_NAME --query "passwords[0].value" -o tsv)
          
          # Update to use newer GitHub Actions output syntax
          echo "ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER" >> $GITHUB_ENV
          echo "ACR_USERNAME=$ACR_USERNAME" >> $GITHUB_ENV
          echo "ACR_PASSWORD=$ACR_PASSWORD" >> $GITHUB_ENV
          # Add mask to hide sensitive output in logs
          echo "::add-mask::$ACR_PASSWORD"

    - name: Build and push image
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_LOGIN_SERVER }}
        username: ${{ env.ACR_USERNAME }}
        password: ${{ env.ACR_PASSWORD }}
    - run: |
        docker build -f containerResources/dockerfile . -t ${{ env.ACR_LOGIN_SERVER }}/renopilot-fenceapp:${{ github.sha }}
        docker push ${{ env.ACR_LOGIN_SERVER }}/renopilot-fenceapp:${{ github.sha }}

    - name: Deploy to Azure Container Instances
      uses: azure/cli@v1
      with:
        inlineScript: |
          # Get subnet ID for direct usage in container creation
          SUBNET_ID=$(az network vnet subnet show \
            --resource-group RenoPilotContainerRG \
            --vnet-name renopilot-container-vpc \
            --name ContainerPublicSubnet \
            --query id -o tsv)
            
          if [ -z "$SUBNET_ID" ]; then
            echo "Error: Could not retrieve subnet ID"
            exit 1
          fi
          
          echo "Using subnet ID: $SUBNET_ID"
          
          # Create container directly with subnet configuration
          # This will either use existing network profile or create one as needed
          echo "Creating production container instance..."
          az container create \
            --resource-group RenoPilotContainerRG \
            --name renopilotfenceappinstance \
            --image ${{ env.ACR_LOGIN_SERVER }}/renopilot-fenceapp:${{ github.sha }} \
            --os-type Linux \
            --registry-login-server ${{ env.ACR_LOGIN_SERVER }} \
            --registry-username ${{ env.ACR_USERNAME }} \
            --registry-password ${{ env.ACR_PASSWORD }} \
            --dns-name-label renopilot-container-${{ github.run_number }} \
            --ports 80 3838 \
            --environment-variables DOCKER_ENV=true DB_SERVER=shiny.database.windows.net DB_NAME=Shiny DB_USER=shiny DB_DRIVER="ODBC Driver 18 for SQL Server" DB_PORT=1433 \
            --secure-environment-variables DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            --subnet $SUBNET_ID \
            --location australiaeast

    - name: Configure Network Security Rules
      uses: azure/cli@v1
      with:
        inlineScript: |
          # Create rule collections first
          echo "Creating firewall rule collections..."
          az network firewall network-rule create \
            --collection-name sqltraffic \
            --name SQLRule \
            --destination-ports 1433 \
            --firewall-name container-privatefw \
            --protocols TCP \
            --resource-group RenoPilotContainerRG \
            --source-addresses 10.0.1.0/24 \
            --destination-addresses "*" \
            --action Allow \
            --priority 100
          
          echo "Creating Docker registry rule collection..."
          az network firewall network-rule create \
            --collection-name dockertraffic \
            --name DockerRule \
            --destination-ports 5000 \
            --firewall-name container-privatefw \
            --protocols TCP \
            --resource-group RenoPilotContainerRG \
            --source-addresses 10.0.1.0/24 \
            --destination-addresses 10.0.2.0/24 \
            --action Allow \
            --priority 200
            
          echo "Creating HTTP rule collection..."
          az network firewall network-rule create \
            --collection-name webtraffic \
            --name HTTPRule \
            --destination-ports 80 \
            --firewall-name container-publicfw \
            --protocols TCP \
            --resource-group RenoPilotContainerRG \
            --source-addresses "*" \
            --destination-addresses 10.0.1.0/24 \
            --action Allow \
            --priority 300
            
          echo "Creating Shiny rule collection..."  
          az network firewall network-rule create \
            --collection-name shinytraffic \
            --name ShinyRule \
            --destination-ports 3838 \
            --firewall-name container-publicfw \
            --protocols TCP \
            --resource-group RenoPilotContainerRG \
            --source-addresses "*" \
            --destination-addresses 10.0.1.0/24 \
            --action Allow \
            --priority 400
          
          # Fix VNet name in subnet reference
          echo "Configuring Azure SQL Server firewall rules..."
          SUBNET_ADDRESS_PREFIX=$(az network vnet subnet show --resource-group RenoPilotContainerRG --vnet-name renopilot-container-vpc --name ContainerPublicSubnet --query addressPrefix -o tsv)
          
          # Check if SQL server exists before attempting to create rules
          if az sql server show --name shiny --resource-group RenoPilotContainerRG &>/dev/null; then
            # Only try to create the firewall rule if the subnet was found
            if [ -n "$SUBNET_ADDRESS_PREFIX" ]; then
              echo "Found subnet prefix: $SUBNET_ADDRESS_PREFIX"
              az sql server firewall-rule create \
                --resource-group RenoPilotContainerRG \
                --server shiny \
                --name "AllowContainerSubnet" \
                --start-ip-address ${SUBNET_ADDRESS_PREFIX%/*} \
                --end-ip-address 255.255.255.255 || echo "SQL server firewall rule creation failed, but continuing"
            else
              echo "Warning: Could not find subnet prefix. Skipping SQL firewall rule creation."
            fi
          else
            echo "SQL server 'shiny' not found. Firewall rule creation skipped."
          fi
