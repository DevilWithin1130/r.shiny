name: RenoPilot CI/CD

on: 
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test-app:
    runs-on: ubuntu-latest
    name: Test R Shiny App
    
    env:
      GITHUB_PAT: ${{ secrets.RENOPILOT_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - name: Checkout Code Base
        uses: actions/checkout@v3

      - name: Set up R Environment
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: release
          use-public-rspm: true

      - name: Install Dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: shinytest2

      - name: Define Environment Variables
        run: |
          echo Environment="Github" >> ~/.Renviron
          echo Driver="ODBC Driver 18 for SQL Server" >> ~/.Renviron
          echo Server="shiny.database.windows.net" >> ~/.Renviron
          echo Database="Shiny" >> ~/.Renviron
          echo UID="shiny" >> ~/.Renviron
          echo PWD="${{ secrets.DB_PASSWORD }}" >> ~/.Renviron
        shell: bash

      - name: Run Tests
        uses: rstudio/shinytest2/actions/test-app@v1
        with:
          path: "."

  deploy-infrastructure:
    needs: test-app
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@main

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Check and Clean Existing Infrastructure
      uses: azure/cli@v1
      with:
        inlineScript: |
          # Check if resource group exists
          RG_EXISTS=$(az group exists --name RenoPilotRG)
          
          if [ "$RG_EXISTS" = "true" ]; then
            echo "Existing infrastructure found. Cleaning up in proper order..."
            
            # 1. Delete Container Instances first (they depend on other resources)
            echo "Deleting Container Instances..."
            az container delete --name renopilotfenceappinstance --resource-group RenoPilotRG --yes || true
            
            # 2. Delete ACR
            echo "Deleting Azure Container Registry..."
            az acr delete --name renopilotregistry --resource-group RenoPilotRG --yes || true
            
            # 3. Delete Firewalls
            echo "Deleting Firewalls..."
            az network firewall delete --name publicfirewall --resource-group RenoPilotRG || true
            az network firewall delete --name privatefirewall --resource-group RenoPilotRG || true
            
            # 4. Delete VNet and subnets
            echo "Deleting VNet and subnets..."
            az network vnet delete --name RenoPilotVPC --resource-group RenoPilotRG || true
            
            echo "Infrastructure cleanup complete."
          else
            echo "No existing infrastructure found. Proceeding with fresh deployment."
          fi

    - name: Create VPC and Subnets
      uses: azure/cli@v1
      with:
        inlineScript: |
          # Create Resource Group
          echo "Creating Resource Group..."
          az group create --name RenoPilotRG --location australiaeast

          # VNet with /16 CIDR block allowing up to 65,536 IP addresses
          echo "Creating VNet..."
          az network vnet create \
            --name RenoPilotVPC \
            --resource-group RenoPilotRG \
            --location australiaeast \
            --address-prefix 10.0.0.0/16

          # Public subnet with /24 CIDR block allowing up to 256 IP addresses
          echo "Creating Public Subnet..."
          az network vnet subnet create \
            --name PublicSubnet \
            --vnet-name RenoPilotVPC \
            --resource-group RenoPilotRG \
            --address-prefix 10.0.1.0/24

          # Private subnet for sensitive resources with /24 CIDR block
          echo "Creating Private Subnet..."
          az network vnet subnet create \
            --name PrivateSubnet \
            --vnet-name RenoPilotVPC \
            --resource-group RenoPilotRG \
            --address-prefix 10.0.2.0/24

    - name: Deploy Firewalls
      uses: azure/cli@v1
      with:
        inlineScript: |
          echo "Creating Firewalls..."
          # Create Public Firewall
          az network firewall create \
            --name publicfirewall \
            --resource-group RenoPilotRG \
            --location australiaeast

          # Create Private Firewall
          az network firewall create \
            --name privatefirewall \
            --resource-group RenoPilotRG \
            --location australiaeast

    - name: Deploy Container Registry
      uses: azure/cli@v1
      with:
        inlineScript: |
          ACR_NAME="renopilotregistry"
          # Premium SKU required for advanced features:
          # - Virtual Network support
          # - Enhanced throughput
          # - Geo-replication capability
          # - Content trust for image tag signing
          az acr create \
            --resource-group RenoPilotRG \
            --name $ACR_NAME \
            --sku Premium \
            --location australiaeast \
            --admin-enabled true  # Enables admin authentication for testing, consider disabling in production
          
          # Retrieve and store registry credentials securely in GitHub environment
          ACR_LOGIN_SERVER=$(az acr show -n $ACR_NAME --query loginServer -o tsv)
          ACR_USERNAME=$(az acr credential show -n $ACR_NAME --query username -o tsv)
          ACR_PASSWORD=$(az acr credential show -n $ACR_NAME --query "passwords[0].value" -o tsv)
          
          echo "::set-output name=login_server::$ACR_LOGIN_SERVER"
          echo "::add-mask::$ACR_PASSWORD"
          echo "ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER" >> $GITHUB_ENV
          echo "ACR_USERNAME=$ACR_USERNAME" >> $GITHUB_ENV
          echo "ACR_PASSWORD=$ACR_PASSWORD" >> $GITHUB_ENV

    - name: Build and push image
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_LOGIN_SERVER }}
        username: ${{ env.ACR_USERNAME }}
        password: ${{ env.ACR_PASSWORD }}
    - run: |
        docker build -f containerResources/dockerfile . -t ${{ env.ACR_LOGIN_SERVER }}/renopilot-fenceapp:${{ github.sha }}
        docker push ${{ env.ACR_LOGIN_SERVER }}/renopilot-fenceapp:${{ github.sha }}

    - name: Deploy to Azure Container Instances
      uses: azure/aci-deploy@v1
      with:
        resource-group: RenoPilotRG
        dns-name-label: renopilot-${{ github.run_number }}
        image: ${{ env.ACR_LOGIN_SERVER }}/renopilot-fenceapp:${{ github.sha }}
        registry-login-server: ${{ env.ACR_LOGIN_SERVER }}
        registry-username: ${{ env.ACR_USERNAME }}
        registry-password: ${{ env.ACR_PASSWORD }}
        name: renopilotfenceappinstance
        location: australiaeast
        vnet: RenoPilotVPC
        subnet: PublicSubnet
        ports: 80 3838

    - name: Configure Network Security Rules
      uses: azure/cli@v1
      with:
        inlineScript: |
          # Allow SQL traffic (port 1433) only from public subnet to private subnet
          az network firewall network-rule create \
            --collection-name sqltraffic \
            --destination-ports 1433 \
            --firewall-name privatefirewall \
            --name SQLRule \
            --protocols TCP \
            --resource-group RenoPilotRG \
            --source-addresses 10.0.1.0/24 \
            --destination-addresses 10.0.2.0/24 \
            --action Allow

          # Allow Docker registry traffic (port 5000) with wider access for image pulls
          az network firewall network-rule create \
            --collection-name dockertraffic \
            --destination-ports 5000 \
            --firewall-name privatefirewall \
            --name DockerRule \
            --protocols TCP \
            --resource-group RenoPilotRG \
            --source-addresses "*" \
            --destination-addresses 10.0.2.0/24 \
            --action Allow
