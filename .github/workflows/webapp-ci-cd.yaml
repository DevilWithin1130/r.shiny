name: RenoPilot Web App CI/CD

on: 
  push:
    branches: [main]
    paths-ignore:
    - '.github/workflows/container-instance-ci-cd.yaml'
  pull_request:
    branches: [main]
    paths-ignore:
    - '.github/workflows/container-instance-ci-cd.yaml'
  workflow_dispatch:

jobs:
  test-app:
    runs-on: ubuntu-latest
    name: Test R Shiny App
    
    env:
      GITHUB_PAT: ${{ secrets.RENOPILOT_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - name: Checkout Code Base
        uses: actions/checkout@v3

      - name: Set up R Environment
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: release
          use-public-rspm: true

      - name: Install Dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: shinytest2

      - name: Define Environment Variables
        run: |
          echo Environment="Github" >> ~/.Renviron
          echo Driver="ODBC Driver 18 for SQL Server" >> ~/.Renviron
          echo Server="shiny.database.windows.net" >> ~/.Renviron
          echo Database="Shiny" >> ~/.Renviron
          echo UID="shiny" >> ~/.Renviron
          echo PWD="${{ secrets.DB_PASSWORD }}" >> ~/.Renviron
        shell: bash

      - name: Run Tests
        uses: rstudio/shinytest2/actions/test-app@v1
        with:
          path: "."

  deploy-infrastructure:
    needs: test-app
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@main

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Register Required Resource Providers
      uses: azure/cli@v1
      with:
        inlineScript: |
          echo "Registering Azure resource providers required for RenoPilot Web App infrastructure..."
          # These Microsoft namespaces are required Azure services for RenoPilot application
          # They cannot be renamed but are essential for our infrastructure
          az provider register --namespace Microsoft.Web
          az provider register --namespace Microsoft.ContainerRegistry
          az provider register --namespace Microsoft.Network
          
          echo "Waiting for RenoPilot required Azure service registrations to complete..."
          # Checking registration status for required providers
          az provider show -n Microsoft.Web --query registrationState
          az provider show -n Microsoft.ContainerRegistry --query registrationState
          az provider show -n Microsoft.Network --query registrationState
          
          # Verify registrations with timeout
          for provider in Microsoft.Web Microsoft.ContainerRegistry Microsoft.Network; do
            state=$(az provider show -n $provider --query registrationState -o tsv)
            echo "RenoPilot Azure dependency: $provider registration state: $state"
            if [ "$state" != "Registered" ]; then
              echo "Waiting for $provider to complete registration..."
              for i in {1..12}; do
                sleep 10
                state=$(az provider show -n $provider --query registrationState -o tsv)
                echo "$provider registration state: $state"
                if [ "$state" == "Registered" ]; then
                  break
                fi
                if [ $i -eq 12 ] && [ "$state" != "Registered" ]; then
                  echo "Warning: $provider registration taking longer than expected. Continuing anyway."
                fi
              done
            fi
          done
    
    - name: Check and Clean Existing Infrastructure
      uses: azure/cli@v1
      with:
        inlineScript: |
          # More aggressive cleanup of resources across all regions
          echo "Searching for existing resources across all regions..."
          
          # 1. Delete Web App first (they depend on other resources)
          echo "Checking for Web App in any region..."
          if az webapp show --name renopilot-webapp --resource-group RenoPilotWebAppRG &>/dev/null; then
            echo "Deleting Web App..."
            az webapp delete --name renopilot-webapp --resource-group RenoPilotWebAppRG || true
            # Add delay to ensure deletion completes
            sleep 30
          fi
          
          # 2. Delete App Service Plan if necessary (in any region)
          echo "Checking for App Service Plan in any region..."
          if az appservice plan show --name renopilot-plan --resource-group RenoPilotWebAppRG &>/dev/null; then
            echo "Deleting App Service Plan..."
            az appservice plan delete --name renopilot-plan --resource-group RenoPilotWebAppRG --yes || true
            # Add delay to ensure deletion completes and quota is released
            sleep 60
          fi
          
          # List all App Service Plans in the subscription to find potential conflicts
          echo "Checking for other App Service Plans that might cause conflicts..."
          APP_PLANS=$(az appservice plan list --query "[?contains(name, 'renopilot')].{name:name, resourceGroup:resourceGroup}" -o tsv)
          if [ -n "$APP_PLANS" ]; then
            echo "Found potentially conflicting App Service Plans:"
            echo "$APP_PLANS"
            echo "Attempting to clean up these plans..."
            echo "$APP_PLANS" | while read -r name rg; do
              if [ -n "$name" ] && [ -n "$rg" ]; then
                echo "Deleting App Service Plan $name in resource group $rg..."
                az appservice plan delete --name "$name" --resource-group "$rg" --yes || true
              fi
            done
            # Add delay to ensure deletion completes
            sleep 60
          fi
          
          # 3. Delete ACR
          echo "Deleting Azure Container Registry..."
          az acr delete --name renopilotwebappreg --resource-group RenoPilotWebAppRG --yes || true
          
          # 4. Check and delete existing NSG in any region
          echo "Checking for Network Security Group in any region..."
          if az network nsg show --name webapp-public-nsg --resource-group RenoPilotWebAppRG &>/dev/null; then
            echo "Deleting existing Network Security Group..."
            az network nsg delete --name webapp-public-nsg --resource-group RenoPilotWebAppRG || true
            sleep 30
          fi
          
          # 5. Delete Firewalls
          echo "Deleting Firewalls..."
          az network firewall delete --name webapp-publicfw --resource-group RenoPilotWebAppRG || true
          az network firewall delete --name webapp-privatefw --resource-group RenoPilotWebAppRG || true
          
          # 6. Delete Route Table
          echo "Deleting Route Table..."
          if az network route-table show --name webapp-public-routes --resource-group RenoPilotWebAppRG &>/dev/null; then
            az network route-table delete --name webapp-public-routes --resource-group RenoPilotWebAppRG || true
            sleep 20
          fi
          
          # 7. Delete VNet and subnets
          echo "Deleting VNet and subnets..."
          az network vnet delete --name renopilot-webapp-vpc --resource-group RenoPilotWebAppRG || true
          
          echo "Infrastructure cleanup complete. Sleeping to ensure all resources are properly released..."
          sleep 30

    - name: Create VPC and Subnets
      uses: azure/cli@v1
      with:
        inlineScript: |
          # Explicitly use Australia Central for all resources
          LOCATION="australiacentral"
          echo "Using location: $LOCATION"
          
          # Store location for use in later steps
          echo "AZURE_LOCATION=$LOCATION" >> $GITHUB_ENV
          
          # Generate a timestamp for unique resource names
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
          
          # Check if Resource Group exists
          RG_EXISTS=$(az group exists --name RenoPilotWebAppRG)
          
          if [ "$RG_EXISTS" = "true" ]; then
            echo "Resource Group already exists."
          else
            echo "Creating Resource Group in $LOCATION..."
            az group create --name RenoPilotWebAppRG --location $LOCATION
          fi
          
          # Verify resource group exists
          if ! az group show --name RenoPilotWebAppRG &>/dev/null; then
            echo "Error: Resource group RenoPilotWebAppRG was not found or created successfully."
            exit 1
          fi
          
          # Add a delay to ensure resource group is fully provisioned
          echo "Waiting for resource group to be fully provisioned..."
          sleep 15
          
          # Create VNet with region-specific name
          VNET_NAME="renopilot-vpc-$LOCATION"
          echo "Creating VNet '$VNET_NAME'..."
          az network vnet create \
            --name $VNET_NAME \
            --resource-group RenoPilotWebAppRG \
            --location $LOCATION \
            --address-prefix 10.1.0.0/16
          
          # Verify VNet was created
          if ! az network vnet show --name $VNET_NAME --resource-group RenoPilotWebAppRG &>/dev/null; then
            echo "Error: VNet $VNET_NAME was not created successfully."
            exit 1
          fi
          
          # Store VNet name for later steps
          echo "VNET_NAME=$VNET_NAME" >> $GITHUB_ENV
          
          # Add delay to ensure VNet is fully provisioned
          sleep 10
          
          # Public subnet with region-specific name
          PUBLIC_SUBNET_NAME="WebAppPublicSubnet-$LOCATION"
          echo "Creating Public Subnet '$PUBLIC_SUBNET_NAME'..."
          az network vnet subnet create \
            --name $PUBLIC_SUBNET_NAME \
            --vnet-name $VNET_NAME \
            --resource-group RenoPilotWebAppRG \
            --address-prefix 10.1.1.0/24 \
            --delegations Microsoft.Web/serverFarms \
            --service-endpoints Microsoft.Web
          
          # Store subnet name for later steps
          echo "PUBLIC_SUBNET_NAME=$PUBLIC_SUBNET_NAME" >> $GITHUB_ENV
          
          # Add delay to ensure subnet is fully provisioned
          sleep 10
          
          # Private subnet with region-specific name
          PRIVATE_SUBNET_NAME="WebAppPrivateSubnet-$LOCATION"
          echo "Creating Private Subnet '$PRIVATE_SUBNET_NAME'..."
          az network vnet subnet create \
            --name $PRIVATE_SUBNET_NAME \
            --vnet-name $VNET_NAME \
            --resource-group RenoPilotWebAppRG \
            --address-prefix 10.1.2.0/24
          
          # Store subnet name for later steps
          echo "PRIVATE_SUBNET_NAME=$PRIVATE_SUBNET_NAME" >> $GITHUB_ENV

    - name: Deploy Network Security Groups
      uses: azure/cli@v1
      with:
        inlineScript: |
          LOCATION="australiacentral"
          # Create NSG with region-specific name
          NSG_NAME="webapp-nsg-$LOCATION"
          echo "Creating Network Security Group '$NSG_NAME'..."
          az network nsg create \
            --name $NSG_NAME \
            --resource-group RenoPilotWebAppRG \
            --location $LOCATION
          
          # Store NSG name for later steps
          echo "NSG_NAME=$NSG_NAME" >> $GITHUB_ENV
            
          # Apply NSG to the subnet
          echo "Applying NSG to subnet..."
          az network vnet subnet update \
            --name ${{ env.PUBLIC_SUBNET_NAME }} \
            --vnet-name ${{ env.VNET_NAME }} \
            --resource-group RenoPilotWebAppRG \
            --network-security-group $NSG_NAME

    - name: Deploy Firewalls
      uses: azure/cli@v1
      with:
        inlineScript: |
          LOCATION="australiacentral"
          echo "Creating Firewalls..."
          
          # Create Public Firewall with region-specific name
          PUBLIC_FW_NAME="webapp-publicfw-$LOCATION"
          echo "Creating Public Firewall '$PUBLIC_FW_NAME'..."
          az network firewall create \
            --name $PUBLIC_FW_NAME \
            --resource-group RenoPilotWebAppRG \
            --location $LOCATION
          
          # Store firewall name for later steps
          echo "PUBLIC_FW_NAME=$PUBLIC_FW_NAME" >> $GITHUB_ENV
            
          # Create Private Firewall with region-specific name
          PRIVATE_FW_NAME="webapp-privatefw-$LOCATION"
          echo "Creating Private Firewall '$PRIVATE_FW_NAME'..."
          az network firewall create \
            --name $PRIVATE_FW_NAME \
            --resource-group RenoPilotWebAppRG \
            --location $LOCATION
          
          # Store firewall name for later steps
          echo "PRIVATE_FW_NAME=$PRIVATE_FW_NAME" >> $GITHUB_ENV
          
          # Create a route table for the subnet with region-specific name
          ROUTE_TABLE_NAME="webapp-routes-$LOCATION"
          echo "Creating route table '$ROUTE_TABLE_NAME'..."
          az network route-table create \
            --name $ROUTE_TABLE_NAME \
            --resource-group RenoPilotWebAppRG \
            --location $LOCATION
          
          # Store route table name for later steps
          echo "ROUTE_TABLE_NAME=$ROUTE_TABLE_NAME" >> $GITHUB_ENV
          
          # Add the route table to the subnet
          echo "Applying route table to subnet..."
          az network vnet subnet update \
            --name ${{ env.PUBLIC_SUBNET_NAME }} \
            --vnet-name ${{ env.VNET_NAME }} \
            --resource-group RenoPilotWebAppRG \
            --route-table $ROUTE_TABLE_NAME

    - name: Deploy Container Registry
      uses: azure/cli@v1
      with:
        inlineScript: |
          LOCATION="australiacentral"
          # Use a unique ACR name that includes location (ACR names must be globally unique)
          ACR_NAME="renopilot${LOCATION}reg"
          echo "Creating Container Registry '$ACR_NAME'..."
          
          az acr create \
            --resource-group RenoPilotWebAppRG \
            --name $ACR_NAME \
            --sku Standard \
            --location $LOCATION \
            --admin-enabled true
          
          # Retrieve and store registry credentials securely in GitHub environment
          ACR_LOGIN_SERVER=$(az acr show -n $ACR_NAME --query loginServer -o tsv)
          ACR_USERNAME=$(az acr credential show -n $ACR_NAME --query username -o tsv)
          ACR_PASSWORD=$(az acr credential show -n $ACR_NAME --query "passwords[0].value" -o tsv)
          
          echo "ACR_NAME=$ACR_NAME" >> $GITHUB_ENV
          echo "ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER" >> $GITHUB_ENV
          echo "ACR_USERNAME=$ACR_USERNAME" >> $GITHUB_ENV
          echo "ACR_PASSWORD=$ACR_PASSWORD" >> $GITHUB_ENV
          # Add mask to hide sensitive output in logs
          echo "::add-mask::$ACR_PASSWORD"

    - name: Build and push image
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_LOGIN_SERVER }}
        username: ${{ env.ACR_USERNAME }}
        password: ${{ env.ACR_PASSWORD }}
    - run: |
        docker build -f containerResources/dockerfile . -t ${{ env.ACR_LOGIN_SERVER }}/renopilot-fenceapp:${{ github.sha }}          
        docker push ${{ env.ACR_LOGIN_SERVER }}/renopilot-fenceapp:${{ github.sha }}

    - name: Create App Service Plan
      uses: azure/cli@v1
      with:
        inlineScript: |
          # Create App Service Plan with region-specific name
          LOCATION="australiacentral"
          APP_PLAN_NAME="renopilot-plan-$LOCATION"
          echo "Creating App Service Plan '$APP_PLAN_NAME'..."
          
          MAX_RETRIES=3
          
          for ((i=1; i<=MAX_RETRIES; i++)); do
            echo "Attempt $i of $MAX_RETRIES to create App Service Plan..."
            
            if az appservice plan create \
              --name $APP_PLAN_NAME \
              --resource-group RenoPilotWebAppRG \
              --is-linux \
              --sku B1 \
              --location $LOCATION; then
              
              echo "App Service Plan created successfully!"
              echo "APP_PLAN_NAME=$APP_PLAN_NAME" >> $GITHUB_ENV
              break
            else
              echo "Failed to create App Service Plan. Waiting before retry..."
              if [ $i -lt $MAX_RETRIES ]; then
                # Exponential backoff - wait longer with each retry
                SLEEP_TIME=$((30 * i))
                echo "Waiting for $SLEEP_TIME seconds before next attempt..."
                sleep $SLEEP_TIME
              else
                echo "Maximum retries reached. Could not create App Service Plan."
                exit 1
              fi
            fi
          done
          
          # Verify App Service Plan exists
          if ! az appservice plan show --name $APP_PLAN_NAME --resource-group RenoPilotWebAppRG &>/dev/null; then
            echo "Error: App Service Plan $APP_PLAN_NAME was not created successfully."
            exit 1
          fi

    - name: Create Web App
      uses: azure/cli@v1
      with:
        inlineScript: |
          LOCATION="australiacentral"
          # Create Web App with region-specific name
          WEBAPP_NAME="renopilot-webapp-$LOCATION"
          echo "Creating Web App '$WEBAPP_NAME'..."
          
          # Create the web app
          az webapp create \
            --resource-group RenoPilotWebAppRG \
            --plan ${{ env.APP_PLAN_NAME }} \
            --name $WEBAPP_NAME \
            --container-image-name ${{ env.ACR_LOGIN_SERVER }}/renopilot-fenceapp:${{ github.sha }}
          
          echo "WEBAPP_NAME=$WEBAPP_NAME" >> $GITHUB_ENV
          
          # Add delay to ensure webapp is created
          sleep 15
          
          # Configure environment variables for the web app
          az webapp config appsettings set \
            --resource-group RenoPilotWebAppRG \
            --name $WEBAPP_NAME \
            --settings \
            DOCKER_ENV=true \
            DB_SERVER=shiny.database.windows.net \
            DB_NAME=Shiny \
            DB_USER=shiny \
            DB_DRIVER="ODBC Driver 18 for SQL Server" \
            DB_PORT=1433 \
            WEBSITES_PORT=3838 \
            DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
          
          # Configure the container settings
          az webapp config container set \
            --name $WEBAPP_NAME \
            --resource-group RenoPilotWebAppRG \
            --container-image-name ${{ env.ACR_LOGIN_SERVER }}/renopilot-fenceapp:${{ github.sha }} \
            --container-registry-url https://${{ env.ACR_LOGIN_SERVER }} \
            --container-registry-user ${{ env.ACR_USERNAME }} \
            --container-registry-password ${{ env.ACR_PASSWORD }}
            
          # Configure the ports for the web app
          az webapp config appsettings set \
            --resource-group RenoPilotWebAppRG \
            --name $WEBAPP_NAME \
            --settings \
            WEBSITES_PORT=3838
          
          # Integrate web app with VNet
          echo "Integrating Web App with VNet..."
          az webapp vnet-integration add \
            --name $WEBAPP_NAME \
            --resource-group RenoPilotWebAppRG \
            --vnet ${{ env.VNET_NAME }} \
            --subnet ${{ env.PUBLIC_SUBNET_NAME }}

          # Allow the web app to be accessible from anywhere
          az webapp config access-restriction remove \
            --name $WEBAPP_NAME \
            --resource-group RenoPilotWebAppRG \
            --rule-name "Allow all" \
            --action Allow \
            --ip-address "Any" \
            --priority 100

    - name: Configure Network Security Rules
      uses: azure/cli@v1
      with:
        inlineScript: |
          # Create rule collections for the region-specific firewalls
          echo "Creating firewall rule collections..."
          az network firewall network-rule create \
            --collection-name sqltraffic \
            --name SQLRule \
            --destination-ports 1433 \
            --firewall-name ${{ env.PRIVATE_FW_NAME }} \
            --protocols TCP \
            --resource-group RenoPilotWebAppRG \
            --source-addresses 10.1.1.0/24 \
            --destination-addresses "*" \
            --action Allow \
            --priority 100
          
          echo "Creating Docker registry rule collection..."
          az network firewall network-rule create \
            --collection-name dockertraffic \
            --name DockerRule \
            --destination-ports 5000 \
            --firewall-name ${{ env.PRIVATE_FW_NAME }} \
            --protocols TCP \
            --resource-group RenoPilotWebAppRG \
            --source-addresses 10.1.1.0/24 \
            --destination-addresses 10.1.2.0/24 \
            --action Allow \
            --priority 200
            
          echo "Creating HTTP rule collection..."
          az network firewall network-rule create \
            --collection-name webtraffic \
            --name HTTPRule \
            --destination-ports 80 \
            --firewall-name ${{ env.PUBLIC_FW_NAME }} \
            --protocols TCP \
            --resource-group RenoPilotWebAppRG \
            --source-addresses "*" \
            --destination-addresses 10.1.1.0/24 \
            --action Allow \
            --priority 300
            
          echo "Creating Shiny rule collection..."  
          az network firewall network-rule create \
            --collection-name shinytraffic \
            --name ShinyRule \
            --destination-ports 3838 \
            --firewall-name ${{ env.PUBLIC_FW_NAME }} \
            --protocols TCP \
            --resource-group RenoPilotWebAppRG \
            --source-addresses "*" \
            --destination-addresses 10.1.1.0/24 \
            --action Allow \
            --priority 400
          
          # Configure Azure SQL Server firewall rules
          echo "Configuring Azure SQL Server firewall rules..."
          SUBNET_ADDRESS_PREFIX=$(az network vnet subnet show --resource-group RenoPilotWebAppRG --vnet-name ${{ env.VNET_NAME }} --name ${{ env.PUBLIC_SUBNET_NAME }} --query addressPrefix -o tsv)
          
          # Only try to create the firewall rule if the subnet was found
          if [ -n "$SUBNET_ADDRESS_PREFIX" ]; then
            echo "Found subnet prefix: $SUBNET_ADDRESS_PREFIX"
            az sql server firewall-rule create \
              --resource-group RenoPilotWebAppRG \
              --server shiny \
              --name "AllowWebAppSubnet" \
              --start-ip-address ${SUBNET_ADDRESS_PREFIX%/*} \
              --end-ip-address 255.255.255.255 || echo "SQL server firewall rule creation failed, but continuing"
          else
            echo "Warning: Could not find subnet prefix. Skipping SQL firewall rule creation."
          fi